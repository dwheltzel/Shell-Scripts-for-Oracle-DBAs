@partition_CUST-setup.sql

SET SERVEROUT ON SIZE UNLIMITED
SET TIME ON 
SET TIMI ON
SET LINES 150
SET PAGES 1000

SPOOL partition_&&V_TABLE-1.lst
-- Tablespace
DEFINE V_TS = 'CUST_DATA'

SELECT COUNT(*) FROM &&V_OWNER..&&V_TABLE;
SELECT 'Total Data Segments', ROUND(SUM(bytes)/1024/1024,0) MB, count(*) segments
  FROM dba_segments WHERE owner = '&&V_OWNER' AND segment_name = '&&V_TABLE'
UNION
SELECT 'Total Index Segments', ROUND(SUM(bytes)/1024/1024,0) MB, count(*) segments
  FROM dba_segments WHERE (owner,segment_name) IN (SELECT owner,index_name FROM dba_indexes WHERE table_owner = '&&V_OWNER' AND table_name = '&&V_TABLE')
UNION
SELECT 'Total LOB Segments', ROUND(SUM(bytes)/1024/1024,0) MB, count(*) segments
  FROM dba_segments WHERE (owner,segment_name) IN (SELECT owner,segment_name FROM dba_lobs WHERE owner = '&&V_OWNER' AND table_name = '&&V_TABLE');

-- Verify that the table is ready
BEGIN
  dbms_redefinition.can_redef_table('&&V_OWNER', '&&V_TABLE', DBMS_REDEFINITION.CONS_USE_PK);
  --dbms_redefinition.can_redef_table('&&V_OWNER', '&&V_TABLE', DBMS_REDEFINITION.CONS_USE_ROWID);
END;
/

-- Create the interim table - all needed DDL changes should be reflected here
--
create table &&V_OWNER..&&V_PART_TABLE (
  cust_num          NUMBER,
  date_added        DATE,
  name              VARCHAR2(150 CHAR),
  addr              VARCHAR2(100 CHAR),
  phone             VARCHAR2(100 CHAR),
  sales             NUMBER
)
PARTITION BY RANGE(date_added) INTERVAL(numtoyminterval(1,'MONTH')) STORE IN (&&V_TS)
(
 PARTITION cust_2020_01 VALUES LESS THAN (to_date('2020-02-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_02 VALUES LESS THAN (to_date('2020-03-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_03 VALUES LESS THAN (to_date('2020-04-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_04 VALUES LESS THAN (to_date('2020-05-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_05 VALUES LESS THAN (to_date('2020-06-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_06 VALUES LESS THAN (to_date('2020-07-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_07 VALUES LESS THAN (to_date('2020-08-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_08 VALUES LESS THAN (to_date('2020-09-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_09 VALUES LESS THAN (to_date('2020-10-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_10 VALUES LESS THAN (to_date('2020-11-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_11 VALUES LESS THAN (to_date('2020-12-01','YYYY-MM-DD')) ,
 PARTITION cust_2020_12 VALUES LESS THAN (to_date('2021-01-01','YYYY-MM-DD'))
);

-- Start the redefinition - this is long running because the copy of all existing data happens here
BEGIN
  dbms_redefinition.start_redef_table('&&V_OWNER', '&&V_TABLE', '&&V_PART_TABLE');
  --dbms_redefinition.start_redef_table('&&V_OWNER', '&&V_TABLE', '&&V_PART_TABLE', options_flag => DBMS_REDEFINITION.CONS_USE_ROWID);
END;
/

-- Copies all dependent objects, including indexes, so this may take some time also
DECLARE
  num_errors PLS_INTEGER;
BEGIN
  dbms_redefinition.copy_table_dependents('&&V_OWNER', '&&V_TABLE', '&&V_PART_TABLE', dbms_redefinition.cons_orig_params,
                                          TRUE, TRUE, TRUE, TRUE, num_errors);
END;
/
-- Details of errors generated by last command
SELECT object_name, base_table_name, ddl_txt FROM dba_redefinition_errors;

-- Check to see that the records are all there.
SELECT COUNT(*) FROM &&V_OWNER..&&V_TABLE;
SELECT COUNT(*) FROM &&V_OWNER..&&V_PART_TABLE;
SELECT 'Total Data Segments', ROUND(SUM(bytes)/1024/1024,0) MB, count(*) segments
  FROM dba_segments WHERE owner = '&&V_OWNER' AND segment_name = '&&V_PART_TABLE'
UNION
SELECT 'Total Index Segments', ROUND(SUM(bytes)/1024/1024,0) MB, count(*) segments
  FROM dba_segments WHERE (owner,segment_name) IN (SELECT owner,index_name FROM dba_indexes WHERE table_owner = '&&V_OWNER' AND table_name = '&&V_PART_TABLE')
UNION
SELECT 'Total LOB Segments', ROUND(SUM(bytes)/1024/1024,0) MB, count(*) segments
  FROM dba_segments WHERE (owner,segment_name) IN (SELECT owner,segment_name FROM dba_lobs WHERE owner = '&&V_OWNER' AND table_name = '&&V_PART_TABLE');

spool off

prompt To continue:
prompt @partition-2.sql &&V_TABLE
prompt To abort:
prompt @partition-abort.sql &&V_TABLE

